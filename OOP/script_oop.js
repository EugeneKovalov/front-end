// Задача №1

// Описать класс Tank, удовлетворяющий следующим требованиям:
// у tank есть вход для его добавления воды из водопровода и два выхода для перелива воды в другие емкости
// при создании tank задается его ёмкость (л) и скорость наполнения водой при подключении к водопроводу (л/с)
// есть возможность подключать/отключать tank от водопровода
// есть возможность подлючать/отключать потребителей к первому и второму выходам tank
// нельзя подключить потребителя к выходу, если к нему уже подключен другой потребитель
// при подключении потребителя нужно указывать его скорость потребления воды (л/с)
// каждую секунду tank обновляет информацию о себе в консоли в виде ". . . 80%", где первые три символа, разделенных пробелами, обозначают подключение к водопроводу, к первому и ко второму выходам соответственно ("." - не подключено, "@" - поключено), примерный лог может иметь вид:
// . . . 80%
// // подключили tank к водопроводу, что долить воды
// @ . . 81%
// @ . . 82%
// @ . . 83%
// // подключили потребителя к первому входу tank
// @ @ . 84.5%
// @ @ . 85%
// @ @ . 85.5%
// // подключили потребителя ко второму входу tank
// @ @ @ 85.75%
// @ @ @ 86%
// @ @ @ 86.25%
// // отключили tank от водопровода
// . @ @ 85.5%
// . @ @ 84.75%
// . @ @ 84%
// при обновлении информации tank предварительно очищает консоль с помощью console.clear()
// tank нельзя наполнить больше, чем на 100%, и нельзя опустошить ниже 0%
// Реализовать внешний и внутренний интерфейсы.

function Tank(capacity, fillingSpeed) {
    this.capacity = capacity;
    this.fillingSpeed = fillingSpeed;
}


// Задача №2

// Написать функцию-конструктор Runner с приватным свойством medals, хранящим информацию о медалях. Создать геттер-сеттер, который, при запуске с одним параметром - типом медали - будет возвращать количество медалей данного типа. При запуске с двумя параметрами - типом и количеством - будет увеличивать количество медалей указанного типа на заданную величину.


// Задача №3

// В библиотеке хранятся книги и журналы.
// создайте классы Book и Magazine с необходимыми свойствами ( не менее 5 для каждого класса)
// создайте родительский класс, от которого функционально наследуют Book и Magazine. Перепишите старые классы с учетом наследования. При проектировании классов заложите возможность в будущем добавить класс Newspaper для хранения информации о газетах. В родительский класс добавьте защищенное свойство доступности издания и методы работы с этим свойством.